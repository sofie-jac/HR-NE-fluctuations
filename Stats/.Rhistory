emm <- try(emmeans(model, ~ LaserLevel * GT), silent = TRUE)
if (inherits(emm, "try-error")) {
return(rep(NA, n_estimates))  # Return NA if emmeans fails
}
# Perform pairwise comparisons within LaserLevel for each GT
contrast_within_laser <- try(contrast(emm, interaction = "pairwise", by = "LaserLevel"), silent = TRUE)
if (inherits(contrast_within_laser, "try-error")) {
return(rep(NA, n_estimates))  # Return NA if contrast fails
}
# Perform pairwise comparisons within GT for each LaserLevel
contrast_within_GT <- try(contrast(emm, interaction = "pairwise", by = "GT"), silent = TRUE)
if (inherits(contrast_within_GT, "try-error")) {
return(rep(NA, n_estimates))  # Return NA if contrast fails
}
contrast_summary_within_laser <- summary(contrast_within_laser)
contrast_summary_within_GT <- summary(contrast_within_GT)
# Combine estimates from both comparisons
combined_estimates <- c(contrast_summary_within_laser$estimate, contrast_summary_within_GT$estimate)
# Ensure the length of combined_estimates matches n_estimates
if (length(combined_estimates) != n_estimates) {
return(rep(NA, n_estimates))
}
# Print the first successful iteration's results
if (!exists("printed_first", envir = .GlobalEnv)) {
print(combined_estimates)
assign("printed_first", TRUE, envir = .GlobalEnv)
}
return(combined_estimates)
}
}
# Counter to track the number of iterations
counter <- 0
# Wrapper function to increment the counter
boot_model_wrapper <- function(data, indices) {
counter <<- counter + 1
cat("Iteration:", counter, "\n")
boot_model(data, indices)
}
# Apply block bootstrapping with R replications
set.seed(123)
subject_indices <- 1:length(unique(data[[subject_var]]))
results <- tryCatch({
boot(data = data, statistic = boot_model_wrapper, R = R, strata = data[[subject_var]], sim = "ordinary")
}, error = function(e) {
cat("Bootstrap error: ", e$message, "\n")
return(NULL)
})
if (is.null(results)) {
stop("Bootstrap process failed.")
}
# Filter out NA results due to non-converging models
valid_results <- results$t[!apply(results$t, 1, function(x) any(is.na(x))),]
# Check the number of valid bootstrap samples
cat("Number of valid bootstrap samples:", nrow(valid_results), "\n")
if (nrow(valid_results) == 0) {
stop("No valid bootstrap samples were obtained.")
}
# Recreate the boot object with only valid results
boot_results <- results
boot_results$t <- valid_results
boot_results$R <- nrow(valid_results)
# Calculate bootstrap confidence intervals for pairwise comparisons
boot_ci <- function(estimates) {
apply(estimates, 2, function(col) {
quantile(col, c(0.025, 0.975))
})
}
pairwise_ci <- boot_ci(valid_results)
# Remove the printed_first variable from the global environment
if (exists("printed_first", envir = .GlobalEnv)) {
rm("printed_first", envir = .GlobalEnv)
}
# Return the bootstrap confidence intervals for pairwise comparisons
return(pairwise_ci)
}
Delta_yfp <- read_csv('C:\Users\trb938\OneDrive - University of Copenhagen\MATLAB\chr2_yfp\yfp data\AUC recalculated/Delta_yfp_combined_both_table')
Delta_yfp <- read_csv('C:\Users\trb938\OneDrive - University of Copenhagen\MATLAB\chr2_yfp\yfp data\AUC recalculated/Delta_yfp_combined_both_table')
Delta_chr2 <-read_csv("C:\Users\trb938\OneDrive - University of Copenhagen\MATLAB\chr2_yfp\yfp data\AUC recalculated/Delta_chr2_combined_both_table")
Delta_yfp <- read_csv('C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Delta_yfp_combined_both_table')
Delta_yfp <- read_csv('C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Delta_yfp_combined_both_table.csv')
Delta_chr2 <- read_csv("C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Delta_yfp_combined_both_table.csv")
Delta <- reshape_and_combine(Delta_chr2, Delta_yfp)
View(Delta)
m1_Delta_AUC_prepost <- lmer(formula = data ~  LaserLevel * GT + (1|SubjectID), data = Delta, control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
m2_Delta_AUC_prepost <- lmer(formula = data ~  LaserLevel + GT + (1|SubjectID), data = Delta)
anova(m1_Delta_AUC_prepost, m2_Delta_AUC_prepost) # M1
check_lmm_assumptions(m1_Delta_AUC_prepost)
emm <- emmeans(m1_Delta_AUC_prepost, ~ LaserLevel * GT, pbkrtest.limit = 3737, lmerTest.limit = 3737)
# Perform pairwise comparisons within each GT for all LaserLevels
contrast_within_GT <- contrast(emm, interaction = "pairwise", by = "GT", adjust = "tukey")
# Perform pairwise comparisons between the two levels of GT for each LaserLevel
contrast_between_GT <- contrast(emm, interaction = "pairwise", by = "LaserLevel", adjust = "tukey")
# Combine the results
pairwise_comparisons <- list(within_GT = contrast_within_GT, between_GT = contrast_between_GT)
pairwise_ci_Delta_AUC_prepost <- bootstrap_pairwise_contrasts(Delta, data ~ LaserLevel * GT + (1|SubjectID), "LaserLevel * GT", "SubjectID", R = 1000)
print(pairwise_comparisons)
print(summary(m1_Delta_AUC_prepost))
print(pairwise_comparisons)
print(summary(m1_Theta_AUC_prepost))
Theta_yfp <- read_csv('C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Theta_yfp_combined_both_table.csv')
Theta_chr2 <- read_csv("C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Theta_yfp_combined_both_table.csv")
Theta <- reshape_and_combine(Theta_chr2, Theta_yfp)
m1_Theta_AUC_prepost <- lmer(formula = data ~  LaserLevel * GT + (1|SubjectID), data = Theta, control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
m2_Theta_AUC_prepost <- lmer(formula = data ~  LaserLevel + GT + (1|SubjectID), data = Theta)
anova(m1_Theta_AUC_prepost, m2_Theta_AUC_prepost) # M1
check_lmm_assumptions(m1_Theta_AUC_prepost) #heteroscacedicity
# Calculate estimated marginal means
emm <- emmeans(m1_Theta_AUC_prepost, ~ LaserLevel * GT, pbkrtest.limit = 3737, lmerTest.limit = 3737)
# Perform pairwise comparisons within each GT for all LaserLevels
contrast_within_GT <- contrast(emm, interaction = "pairwise", by = "GT", adjust = "tukey")
# Perform pairwise comparisons between the two levels of GT for each LaserLevel
contrast_between_GT <- contrast(emm, interaction = "pairwise", by = "LaserLevel", adjust = "tukey")
# Combine the results
pairwise_comparisons <- list(within_GT = contrast_within_GT, between_GT = contrast_between_GT)
print(pairwise_comparisons)
print(summary(m1_Theta_AUC_prepost))
Sigma_yfp <- read_csv('C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Sigma_yfp_combined_both_table.csv')
Sigma_chr2 <- read_csv("C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Sigma_yfp_combined_both_table.csv")
Sigma <- reshape_and_combine(Sigma_chr2, Sigma_yfp)
m1_Sigma_AUC_prepost <- lmer(formula = data ~  LaserLevel * GT + (1|SubjectID), data = Sigma, control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
m2_Sigma_AUC_prepost <- lmer(formula = data ~  LaserLevel + GT + (1|SubjectID), data = Sigma)
anova(m1_Sigma_AUC_prepost, m2_Sigma_AUC_prepost) # M1
check_lmm_assumptions(m1_Sigma_AUC_prepost) #heteroscacedicity
# Calculate estimated marginal means
emm <- emmeans(m1_Sigma_AUC_prepost, ~ LaserLevel * GT, pbkrtest.limit = 3737, lmerTest.limit = 3737)
# Perform pairwise comparisons within each GT for all LaserLevels
contrast_within_GT <- contrast(emm, interaction = "pairwise", by = "GT", adjust = "tukey")
# Perform pairwise comparisons between the two levels of GT for each LaserLevel
contrast_between_GT <- contrast(emm, interaction = "pairwise", by = "LaserLevel", adjust = "tukey")
# Combine the results
pairwise_comparisons <- list(within_GT = contrast_within_GT, between_GT = contrast_between_GT)
print(pairwise_comparisons)
print(summary(m1_Sigma_AUC_prepost))
Delta_yfp <- read_csv('C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Delta_yfp_combined_both_table.csv')
Delta_chr2 <- read_csv("C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Delta_chr2_combined_both_table.csv")
Delta <- reshape_and_combine(Delta_chr2, Delta_yfp)
m1_Delta_AUC_prepost <- lmer(formula = data ~  LaserLevel * GT + (1|SubjectID), data = Delta, control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
m2_Delta_AUC_prepost <- lmer(formula = data ~  LaserLevel + GT + (1|SubjectID), data = Delta)
anova(m1_Delta_AUC_prepost, m2_Delta_AUC_prepost) # M1
check_lmm_assumptions(m1_Delta_AUC_prepost) #heteroscacedicity
emm <- emmeans(m1_Delta_AUC_prepost, ~ LaserLevel * GT, pbkrtest.limit = 3737, lmerTest.limit = 3737)
# Perform pairwise comparisons within each GT for all LaserLevels
contrast_within_GT <- contrast(emm, interaction = "pairwise", by = "GT", adjust = "tukey")
# Perform pairwise comparisons between the two levels of GT for each LaserLevel
contrast_between_GT <- contrast(emm, interaction = "pairwise", by = "LaserLevel", adjust = "tukey")
# Combine the results
pairwise_comparisons <- list(within_GT = contrast_within_GT, between_GT = contrast_between_GT)
print(pairwise_comparisons)
print(summary(m1_Delta_AUC_prepost))
Theta_yfp <- read_csv('C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Theta_yfp_combined_both_table.csv')
Theta_chr2 <- read_csv("C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Theta_chr2_combined_both_table.csv")
Theta <- reshape_and_combine(Theta_chr2, Theta_yfp)
m1_Theta_AUC_prepost <- lmer(formula = data ~  LaserLevel * GT + (1|SubjectID), data = Theta, control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
m2_Theta_AUC_prepost <- lmer(formula = data ~  LaserLevel + GT + (1|SubjectID), data = Theta)
anova(m1_Theta_AUC_prepost, m2_Theta_AUC_prepost) # M1
check_lmm_assumptions(m1_Theta_AUC_prepost) #heteroscacedicity + normality
emm <- emmeans(m1_Theta_AUC_prepost, ~ LaserLevel * GT, pbkrtest.limit = 3737, lmerTest.limit = 3737)
# Perform pairwise comparisons within each GT for all LaserLevels
contrast_within_GT <- contrast(emm, interaction = "pairwise", by = "GT", adjust = "tukey")
# Perform pairwise comparisons between the two levels of GT for each LaserLevel
contrast_between_GT <- contrast(emm, interaction = "pairwise", by = "LaserLevel", adjust = "tukey")
# Combine the results
pairwise_comparisons <- list(within_GT = contrast_within_GT, between_GT = contrast_between_GT)
print(pairwise_comparisons)
print(summary(m1_Theta_AUC_prepost))
Sigma_yfp <- read_csv('C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Sigma_yfp_combined_both_table.csv')
Sigma_chr2 <- read_csv("C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Sigma_chr2_combined_both_table.csv")
Sigma <- reshape_and_combine(Sigma_chr2, Sigma_yfp)
m1_Sigma_AUC_prepost <- lmer(formula = data ~  LaserLevel * GT + (1|SubjectID), data = Sigma, control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
m2_Sigma_AUC_prepost <- lmer(formula = data ~  LaserLevel + GT + (1|SubjectID), data = Sigma)
anova(m1_Sigma_AUC_prepost, m2_Sigma_AUC_prepost) # M1
check_lmm_assumptions(m1_Sigma_AUC_prepost) #heteroscacedicity
# Calculate estimated marginal means
emm <- emmeans(m1_Sigma_AUC_prepost, ~ LaserLevel * GT, pbkrtest.limit = 3737, lmerTest.limit = 3737)
# Perform pairwise comparisons within each GT for all LaserLevels
contrast_within_GT <- contrast(emm, interaction = "pairwise", by = "GT", adjust = "tukey")
# Perform pairwise comparisons between the two levels of GT for each LaserLevel
contrast_between_GT <- contrast(emm, interaction = "pairwise", by = "LaserLevel", adjust = "tukey")
# Combine the results
pairwise_comparisons <- list(within_GT = contrast_within_GT, between_GT = contrast_between_GT)
print(pairwise_comparisons)
print(summary(m1_Sigma_AUC_prepost))
Beta_yfp <- read_csv('C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Beta_yfp_combined_both_table.csv')
Beta_chr2 <- read_csv("C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Beta_chr2_combined_both_table.csv")
Beta <- reshape_and_combine(Beta_chr2, Beta_yfp)
m1_Beta_AUC_prepost <- lmer(formula = data ~  LaserLevel * GT + (1|SubjectID), data = Beta, control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
m2_Beta_AUC_prepost <- lmer(formula = data ~  LaserLevel + GT + (1|SubjectID), data = Beta)
anova(m1_Beta_AUC_prepost, m2_Beta_AUC_prepost) # M1
check_lmm_assumptions(m1_Beta_AUC_prepost) #heteroscacedicity
# Calculate estimated marginal means
emm <- emmeans(m1_Beta_AUC_prepost, ~ LaserLevel * GT, pbkrtest.limit = 3737, lmerTest.limit = 3737)
# Perform pairwise comparisons within each GT for all LaserLevels
contrast_within_GT <- contrast(emm, interaction = "pairwise", by = "GT", adjust = "tukey")
# Perform pairwise comparisons between the two levels of GT for each LaserLevel
contrast_between_GT <- contrast(emm, interaction = "pairwise", by = "LaserLevel", adjust = "tukey")
# Combine the results
pairwise_comparisons <- list(within_GT = contrast_within_GT, between_GT = contrast_between_GT)
print(pairwise_comparisons)
print(summary(m1_Beta_AUC_prepost))
Gamma_high_yfp <- read_csv('C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Gamma_high_yfp_combined_both_table.csv')
Gamma_high_chr2 <- read_csv("C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC recalculated/Gamma_high_chr2_combined_both_table.csv")
Gamma_high <- reshape_and_combine(Gamma_high_chr2, Gamma_high_yfp)
m1_Gamma_high_AUC_prepost <- lmer(formula = data ~  LaserLevel * GT + (1|SubjectID), data = Gamma_high, control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
m2_Gamma_high_AUC_prepost <- lmer(formula = data ~  LaserLevel + GT + (1|SubjectID), data = Gamma_high)
anova(m1_Gamma_high_AUC_prepost, m2_Gamma_high_AUC_prepost) # M1
check_lmm_assumptions(m1_Gamma_high_AUC_prepost) #heteroscacedicity
# Calculate estimated marginal means
emm <- emmeans(m1_Gamma_high_AUC_prepost, ~ LaserLevel * GT, pbkrtest.limit = 3737, lmerTest.limit = 3737)
# Perform pairwise comparisons within each GT for all LaserLevels
contrast_within_GT <- contrast(emm, interaction = "pairwise", by = "GT", adjust = "tukey")
# Perform pairwise comparisons between the two levels of GT for each LaserLevel
contrast_between_GT <- contrast(emm, interaction = "pairwise", by = "LaserLevel", adjust = "tukey")
# Combine the results
pairwise_comparisons <- list(within_GT = contrast_within_GT, between_GT = contrast_between_GT)
print(pairwise_comparisons)
print(summary(m1_Gamma_high_AUC_prepost))
pairwise_ci_Delta_AUC_prepost <- bootstrap_pairwise_contrasts(Delta, data ~ LaserLevel * GT + (1|SubjectID), "LaserLevel * GT", "SubjectID", R = 1000)
pairwise_ci_Delta_AUC_prepost <- bootstrap_pairwise_contrasts(Delta, data ~ LaserLevel * GT + (1|SubjectID), "LaserLevel * GT", "SubjectID", R = 1000)
print(pairwise_comparisons)
print(summary(m1_Gamma_high_AUC_prepost))
pairwise_ci_Delta_AUC_prepost <- bootstrap_pairwise_contrasts(Delta, data ~ LaserLevel * GT + (1|SubjectID), "LaserLevel * GT", "SubjectID", R = 1000)
print(pairwise_ci_Delta_AUC_prepost)
print(pairwise_ci_Delta_AUC_prepost)
print(pairwise_comparisons)
print(summary(m1_Delta_AUC_prepost))
pairwise_ci_Theta_AUC_prepost <- bootstrap_pairwise_contrasts(Theta, data ~ LaserLevel * GT + (1|SubjectID), "LaserLevel * GT", "SubjectID", R = 1000)
print(pairwise_ci_Theta_AUC_prepost)
print(pairwise_comparisons)
print(summary(m1_Theta_AUC_prepost))
print(pairwise_ci_Theta_AUC_prepost)
print(pairwise_comparisons)
print(summary(m1_Theta_AUC_prepost))
pairwise_ci_Sigma_AUC_prepost <- bootstrap_pairwise_contrasts(Sigma, data ~ LaserLevel * GT + (1|SubjectID), "LaserLevel * GT", "SubjectID", R = 1000)
print(pairwise_ci_Sigma_AUC_prepost)
print(pairwise_comparisons)
print(summary(m1_Sigma_AUC_prepost))
pairwise_ci_Beta_AUC_prepost <- bootstrap_pairwise_contrasts(Beta, data ~ LaserLevel * GT + (1|SubjectID), "LaserLevel * GT", "SubjectID", R = 1000)
print(pairwise_ci_Beta_AUC_prepost)
print(pairwise_ci_Beta_AUC_prepost)
print(pairwise_comparisons)
print(summary(m1_Beta_AUC_prepost))
pairwise_ci_Gamma_high_AUC_prepost <- bootstrap_pairwise_contrasts(Gamma_high, data ~ LaserLevel * GT + (1|SubjectID), "LaserLevel * GT", "SubjectID", R = 1000)
# Get the predicted values and residuals
Delta$predicted <- predict(m1_Delta_AUC_prepost)
Delta$residuals <- residuals(m1_Delta_AUC_prepost)
# Calculate the means and SEM for each LaserLevel and GT combination
summary_data <- Delta %>%
group_by(LaserLevel, GT) %>%
summarise(mean_value = mean(predicted),
SEM = sd(predicted) / sqrt(n()))
Delta$predicted <- predict(m1_Delta_AUC_prepost)
Delta$residuals <- residuals(m1_Delta_AUC_prepost)
summary_data <- Delta %>%
group_by(LaserLevel, GT) %>%
summarise(mean_value = mean(predicted),
SEM = sd(predicted) / sqrt(dplyr::n()))
summary_data <- Delta %>%
group_by(LaserLevel, GT) %>%
summarise(mean_value = mean(predicted),
SEM = sd(predicted) / sqrt(n()))
summary_data <- Delta %>%
group_by(LaserLevel, GT) %>%
summarise(mean_value = mean(predicted),
count = n(),
SEM = sd(predicted) / sqrt(count))
# Calculate the means for each LaserLevel and GT combination
summary_data <- Delta %>%
group_by(LaserLevel, GT) %>%
summarise(mean_value = mean(predicted))
# Create the plot
p <- ggplot(summary_data, aes(x = LaserLevel, y = mean_value, color = GT, group = GT)) +
geom_point(position = position_dodge(width = 0.2), size = 3) +
geom_line(position = position_dodge(width = 0.2), size = 1) +
labs(title = "Mean by Laser Level and GT",
x = "Laser Level",
y = "Mean Value",
color = "GT") +
theme_minimal()
# Print the plot
print(p)
# Create the plot
ggplot(summary_data, aes(x = LaserLevel, y = mean_value, color = GT, group = GT)) +
geom_point(position = position_dodge(width = 0.2), size = 3) +
geom_line(position = position_dodge(width = 0.2), size = 1) +
labs(title = "Mean by Laser Level and GT",
x = "Laser Level",
y = "Mean Value",
color = "GT") +
theme_minimal()
# Calculate the means for each LaserLevel and GT combination
summary_data <- Delta %>%
group_by(LaserLevel, GT) %>%
summarise(mean_value = mean(predicted))
# Create the plot
ggplot(summary_data, aes(x = LaserLevel, y = mean_value, color = GT, group = GT)) +
geom_point(position = position_dodge(width = 0.2), size = 3) +
geom_line(position = position_dodge(width = 0.2), size = 1) +
labs(title = "Mean by Laser Level and GT",
x = "Laser Level",
y = "Mean Value",
color = "GT") +
theme_minimal()
View(summary_data)
summary_data <- Delta %>%
group_by(LaserLevel, GT) %>%
summarise(mean_value = mean(predicted), .groups = 'drop')
summary_data <- Delta %>%
group_by(LaserLevel, GT)
View(summary_data)
means_data <- Delta %>%
group_by(LaserLevel, GT) %>%
summarise(mean_value = mean(data), .groups = 'drop')
View(means_data)
print(means_data)
means_data <- Delta %>%
group_by(LaserLevel, GT) %>%
summarise(mean_value = mean(data, na.rm = TRUE), .groups = 'drop')
means_data <- Delta %>%
group_by(LaserLevel, GT) %>%
summarise(mean(data, na.rm = TRUE), .groups = 'drop')
means_data <- aggregate(data ~ LaserLevel + GT, data = Delta, FUN = mean)
View(means_data)
print(means_data)
View(means_data)
View(Delta)
View(Theta)
# Print pairwise comparisons
print(pairwise_ci_Delta_AUC_prepost)
print(pairwise_comparisons)
print(summary(m1_Delta_AUC_prepost))
# Calculate estimated marginal means
emm <- emmeans(m1_Delta_AUC_prepost, ~ LaserLevel * GT, pbkrtest.limit = 3737, lmerTest.limit = 3737)
# Perform pairwise comparisons within each GT for all LaserLevels
contrast_within_GT <- contrast(emm, interaction = "pairwise", by = "GT", adjust = "tukey")
# Perform pairwise comparisons between the two levels of GT for each LaserLevel
contrast_between_GT <- contrast(emm, interaction = "pairwise", by = "LaserLevel", adjust = "tukey")
# Combine the results
pairwise_comparisons <- list(within_GT = contrast_within_GT, between_GT = contrast_between_GT)
print(pairwise_ci_Delta_AUC_prepost)
print(pairwise_comparisons)
print(summary(m1_Delta_AUC_prepost))
# Calculate estimated marginal means
emm <- emmeans(m1_Theta_AUC_prepost, ~ LaserLevel * GT, pbkrtest.limit = 3737, lmerTest.limit = 3737)
# Perform pairwise comparisons within each GT for all LaserLevels
contrast_within_GT <- contrast(emm, interaction = "pairwise", by = "GT", adjust = "tukey")
# Perform pairwise comparisons between the two levels of GT for each LaserLevel
contrast_between_GT <- contrast(emm, interaction = "pairwise", by = "LaserLevel", adjust = "tukey")
# Combine the results
pairwise_comparisons <- list(within_GT = contrast_within_GT, between_GT = contrast_between_GT)
# Print pairwise comparisons
print(pairwise_ci_Theta_AUC_prepost)
print(pairwise_comparisons)
print(summary(m1_Theta_AUC_prepost))
emm <- emmeans(m1_Sigma_AUC_prepost, ~ LaserLevel * GT, pbkrtest.limit = 3737, lmerTest.limit = 3737)
# Perform pairwise comparisons within each GT for all LaserLevels
contrast_within_GT <- contrast(emm, interaction = "pairwise", by = "GT", adjust = "tukey")
# Perform pairwise comparisons between the two levels of GT for each LaserLevel
contrast_between_GT <- contrast(emm, interaction = "pairwise", by = "LaserLevel", adjust = "tukey")
# Combine the results
pairwise_comparisons <- list(within_GT = contrast_within_GT, between_GT = contrast_between_GT)
print(pairwise_ci_Sigma_AUC_prepost)
print(pairwise_comparisons)
print(summary(m1_Sigma_AUC_prepost))
# Calculate estimated marginal means
emm <- emmeans(m1_Beta_AUC_prepost, ~ LaserLevel * GT, pbkrtest.limit = 3737, lmerTest.limit = 3737)
# Perform pairwise comparisons within each GT for all LaserLevels
contrast_within_GT <- contrast(emm, interaction = "pairwise", by = "GT", adjust = "tukey")
# Perform pairwise comparisons between the two levels of GT for each LaserLevel
contrast_between_GT <- contrast(emm, interaction = "pairwise", by = "LaserLevel", adjust = "tukey")
# Combine the results
pairwise_comparisons <- list(within_GT = contrast_within_GT, between_GT = contrast_between_GT)
print(pairwise_ci_Beta_AUC_prepost)
print(pairwise_comparisons)
print(summary(m1_Beta_AUC_prepost))
# Calculate estimated marginal means
emm <- emmeans(m1_Gamma_high_AUC_prepost, ~ LaserLevel * GT, pbkrtest.limit = 3737, lmerTest.limit = 3737)
# Perform pairwise comparisons within each GT for all LaserLevels
contrast_within_GT <- contrast(emm, interaction = "pairwise", by = "GT", adjust = "tukey")
# Perform pairwise comparisons between the two levels of GT for each LaserLevel
contrast_between_GT <- contrast(emm, interaction = "pairwise", by = "LaserLevel", adjust = "tukey")
# Combine the results
pairwise_comparisons <- list(within_GT = contrast_within_GT, between_GT = contrast_between_GT)
# Print pairwise comparisons
print(pairwise_ci_Gamma_high_AUC_prepost)
print(pairwise_comparisons)
print(summary(m1_Gamma_high_AUC_prepost))
#knitr::opts_chunk$set(echo = TRUE)
library(pacman)
pacman::p_load(knitr, optimx, MuMIn, tidyverse, emmeans, MASS, boot, robustlmm, dplyr, lmtest, fitdistrplus, car, ggpubr, ggplot2, ggthemes, plyr, lme4, RColorBrewer, reshape2, afex, emmeans, psych, lmerTest, compare, rstatix, ggExtra, gridExtra, ggeffects, modelr, boot, stats)
setwd("C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/Graphpad tables")
df <- read_csv('C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/Graphpad tables/auc_diff_table.csv')
df$EventVar <- as.factor(df$EventVar)
df$EventVar <- factor(df$EventVar, levels = c("NREMexclMA_periods_pklocs", "NREM_before_MA_short", "NREM_before_MA_long", "SWS_before_wake_pklocs"))
df$SubjectID <- as.factor(df$SubjectID)
m_h1 <- lmer(formula = RR ~  Sigma + (1|SubjectID), data = df)
m_h2 <- lmer(formula = RR ~  Sigma + (Sigma|SubjectID), data = df, control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
anova(m_h1, m_h2) # M2 better
summary(m_h2)
r.squaredGLMM(m_h1)
# Example usage with your model
check_lmm_assumptions(m_h2)
m_h1 <- lmer(formula = RR ~  Beta + (1|SubjectID), data = df)
m_h2 <- lmer(formula = RR ~  Beta + (Beta|SubjectID), data = df, control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
anova(m_h1, m_h2) # M2 better
# Example usage with your model
check_lmm_assumptions(m_h2)
m_h2 <- lmer(formula = RR ~  Gamma_high + (Gamma_high|SubjectID), data = df, control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
check_lmm_assumptions(m_h2)
NE_AUC_prepost_chr2 <- read_csv('C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/AUC of Traces/NE_combined_both_table.csv')
NE_AUC_prepost_yfp <-read_csv("C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC of Traces/NE_combined_both_table.csv")
NE_AUC_prepost <- reshape_and_combine(NE_AUC_prepost_chr2, NE_AUC_prepost_yfp)
AUC_prepost <- cbind(NE_AUC_prepost_chr2 %>% select(SubjectID, NE), RR_AUC_prepost_chr2 %>% select(RR))
NE_AUC_pre_chr2 <- read_csv('C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/AUC of Traces/NE_combined_pre_table.csv')
NE_AUC_pre_yfp <-read_csv("C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC of Traces/NE_combined_pre_yfp.csv")
NE_AUC_pre <- reshape_and_combine(NE_AUC_pre_chr2, NE_AUC_pre_yfp)
NE_AUC_pre_chr2 <- preprocess_dataframe(NE_AUC_pre_chr2)
NE_AUC_pre_yfp <- preprocess_dataframe(NE_AUC_pre_yfp)
AUC_prepost <- cbind(NE_AUC_prepost_chr2 %>% select(SubjectID, NE), RR_AUC_prepost_chr2 %>% select(RR))
RR_AUC_prepost_chr2 <- read_csv('C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/AUC of Traces/RR_combined_both_table.csv')
RR_AUC_prepost_yfp <-read_csv("C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC of Traces/RR_combined_both_table.csv")
RR_AUC_prepost <- reshape_and_combine(RR_AUC_prepost_chr2, RR_AUC_prepost_yfp)
AUC_prepost <- cbind(NE_AUC_prepost_chr2 %>% select(SubjectID, NE), RR_AUC_prepost_chr2 %>% select(RR))
AUC_prepost <- AUC_prepost[, !duplicated(colnames(AUC_prepost))]
m_h1 <- lmer(formula = RR ~  NE + (1|SubjectID), data = AUC_prepost)
check_lmm_assumptions(m_h1)
RR_AUC_prepost_chr2_filtered <- RR_AUC_prepost_chr2 %>%
filter(is.na(RR_LaserLevel_4) & is.na(RR_LaserLevel_5))
# Filter out rows where NE_LaserLevel_4 or NE_LaserLevel_5 are not NA
NE_AUC_prepost_chr2_filtered <- NE_AUC_prepost_chr2 %>%
filter(is.na(NE_LaserLevel_4) & is.na(NE_LaserLevel_5))
# Ensure both dataframes have the same length
min_length <- min(nrow(RR_AUC_prepost_chr2_filtered), nrow(NE_AUC_prepost_chr2_filtered))
RR_AUC_prepost_chr2_filtered <- RR_AUC_prepost_chr2_filtered[1:min_length, ]
NE_AUC_prepost_chr2_filtered <- NE_AUC_prepost_chr2_filtered[1:min_length, ]
# Combine the columns directly
AUC_prepost <- cbind(NE_AUC_prepost_chr2_filtered %>% select(SubjectID, NE),
RR_AUC_prepost_chr2_filtered %>% select(RR))
# Remove duplicate SubjectID column if it exists
AUC_prepost <- AUC_prepost[, !duplicated(colnames(AUC_prepost))]
m_h1 <- lmer(formula = RR ~  NE + (1|SubjectID), data = AUC_prepost)
check_lmm_assumptions(m_h1)
NE_AUC_prepost_yfp <-read_csv("C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC of Traces/NE_combined_both_table.csv")
RR_AUC_prepost_yfp <-read_csv("C:/Users/trb938/OneDrive - University of Copenhagen/MATLAB/chr2_yfp/yfp data/AUC of Traces/RR_combined_both_table.csv")
AUC_prepost_yfp <- cbind(NE_AUC_prepost_yfp %>% select(SubjectID, NE), RR_AUC_prepost_yfp %>% select(RR))
View(AUC_prepost_yfp)
m_h1 <- lmer(formula = RR ~  NE + (1|SubjectID), data = AUC_prepost_yfp)
m_h2 <- lmer(formula = RR ~  NE + (NE|SubjectID), data = AUC_prepost_yfp, control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
anova(m_h1, m_h2) # M1 better
check_lmm_assumptions(m_h1)
ci_NE_AUC <- perform_bootstrap_pearson_correlation(AUC_prepost_yfp, RR ~  NE + (1|SubjectID), "SubjectID", R = 1000)
summary(m_h1)
r.squaredGLMM(m_h1)
print(ci_NE_AUC)
pearson(m_h1, AUC_prepost_yfp$RR)
RR_AUC_prepost_yfp_filtered <- RR_AUC_prepost_yfp %>%
filter(is.na(RR_LaserLevel_4) & is.na(RR_LaserLevel_5))
# Filter out rows where NE_LaserLevel_4 or NE_LaserLevel_5 are not NA
NE_AUC_prepost_yfp_filtered <- NE_AUC_prepost_yfp %>%
filter(is.na(NE_LaserLevel_4) & is.na(NE_LaserLevel_5))
# Ensure both dataframes have the same length
min_length <- min(nrow(RR_AUC_prepost_yfp_filtered), nrow(NE_AUC_prepost_yfp_filtered))
RR_AUC_prepost_yfp_filtered <- RR_AUC_prepost_yfp_filtered[1:min_length, ]
NE_AUC_prepost_yfp_filtered <- NE_AUC_prepost_yfp_filtered[1:min_length, ]
# Combine the columns directly
AUC_prepost <- cbind(NE_AUC_prepost_yfp_filtered %>% select(SubjectID, NE),
RR_AUC_prepost_yfp_filtered %>% select(RR))
# Remove duplicate SubjectID column if it exists
AUC_prepost <- AUC_prepost[, !duplicated(colnames(AUC_prepost))]
m_h1 <- lmer(formula = RR ~  NE + (1|SubjectID), data = AUC_prepost)
m_h2 <- lmer(formula = RR ~  NE + (NE|SubjectID), data = AUC_prepost, control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
anova(m_h1, m_h2) # M1 better
summary(m_h1)
# Example usage with your model
check_lmm_assumptions(m_h1)
# Transformations
# df$RR_log <- log(df$RR + 1)  # Adding 1 to avoid log(0)
# df$RR_sqrt <- sqrt(df$RR)
# df$RR_inv <- 1 / (df$RR + 1)
# # Fit Models with Transformations
# m_h1_transformed <- lmer(formula = RR_log ~ Delta + (Delta|SubjectID), data = df)
# m_sqrt <- lmer(RR_sqrt ~ Delta + (Delta|SubjectID), data = df)
# m_inv <- lmer(RR_inv ~ Delta + (Delta|SubjectID), data = df)
#
# # Check Assumptions for all transformations
# check_lmm_assumptions(m_inv)
# Example initialization with a continuous predictor
ci_NE_AUC_simple <- perform_bootstrap_pearson_correlation(AUC_prepost, RR ~  NE + (1|SubjectID), "SubjectID", R = 1000)
summary(m_h1)
r.squaredGLMM(m_h1)
print(ci_NE_AUC_simple)
RR_AUC_prepost_yfp_filtered <- RR_AUC_prepost_yfp %>%
filter(is.na(RR_LaserLevel_4) & is.na(RR_LaserLevel_5))
# Filter out rows where NE_LaserLevel_4 or NE_LaserLevel_5 are not NA
NE_AUC_prepost_yfp_filtered <- NE_AUC_prepost_yfp %>%
filter(is.na(NE_LaserLevel_4) & is.na(NE_LaserLevel_5))
# Ensure both dataframes have the same length
min_length <- min(nrow(RR_AUC_prepost_yfp_filtered), nrow(NE_AUC_prepost_yfp_filtered))
RR_AUC_prepost_yfp_filtered <- RR_AUC_prepost_yfp_filtered[1:min_length, ]
NE_AUC_prepost_yfp_filtered <- NE_AUC_prepost_yfp_filtered[1:min_length, ]
# Combine the columns directly
AUC_prepost <- cbind(NE_AUC_prepost_yfp_filtered %>% select(SubjectID, NE),
RR_AUC_prepost_yfp_filtered %>% select(RR))
View(AUC_prepost)
m_h1 <- lmer(formula = RR ~  NE + (1|SubjectID), data = AUC_prepost)
m_h2 <- lmer(formula = RR ~  NE + (NE|SubjectID), data = AUC_prepost, control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
anova(m_h1, m_h2) # M1 better
check_lmm_assumptions(m_h1)
ci_NE_AUC_simple <- perform_bootstrap_pearson_correlation(AUC_prepost, RR ~  NE + (1|SubjectID), "SubjectID", R = 1000)
summary(m_h1)
r.squaredGLMM(m_h1)
print(ci_NE_AUC_simple)
pearson(m_h1, AUC_prepost$RR)
